<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_operation">
    <sys_ws_operation action="INSERT_OR_UPDATE">
        <active>true</active>
        <consumes>application/json</consumes>
        <consumes_customized>false</consumes_customized>
        <default_operation_uri/>
        <enforce_acl>cf9d01d3e73003009d6247e603f6a990</enforce_acl>
        <http_method>POST</http_method>
        <name>ni_orders</name>
        <operation_script><![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {

	// implement resource here
	var requested_for = '';
	var request_type = '';
	var what_needed = '';
	var when_needed = '2019-01-01 00:00:00';
	var short_description = '';
	var requestBody = request.body;
	var requestData = requestBody.data; //May be an array or a single object
	var apiError = new sn_ws_err.ServiceError();

	if (requestData instanceof Array) { 
		requested_for = requestData[0].requested_for; // 'User ID'
		request_type = requestData[0].request_type;
		what_needed = requestData[0].what_needed;
		when_needed = requestData[0].when_needed;
		short_description = requestData[0].short_description;
	} else {
		requested_for = requestData.requested_for; // 'User ID'
		request_type = requestData.request_type;
		what_needed = requestData.what_needed; //
		when_needed = requestData.when_needed;
		short_description = requestData.short_description;
	}

	// Query the sys_user table to get the user record for the user passed in
	// the requested_for Body parameter.  
	var requestFor = new GlideRecord('sys_user');
	requestFor.get('user_name',requested_for);

	// If there is no user record for the user_name passed in the user_name path parameter,
	// return a custom error. Notice the error object is created from sn_ws_err.ServiceError();  
	// If no status value is set, the HTTP Status will be 500.
	if(!requestFor.user_name){
		apiError.setStatus(542);
		apiError.setMessage("User not found");
		apiError.setDetail("No user record found for the user_name passed into the requested_for Body element.");
		response.setError(apiError);
		return;
	}

	// create a new needit record 
	var needitRecord = new GlideRecord('x_58872_needit_needit');
	needitRecord.initialize(); 
	needitRecord.setValue('u_requested_for', requestFor.sys_id);
	needitRecord.setValue('u_requested_for_email', requestFor.email);
	needitRecord.setValue('u_request_type', request_type);
	needitRecord.setValue('u_what_needed', what_needed);
	needitRecord.setValue('u_when_needed', when_needed);
	needitRecord.setValue('short_description', short_description);
	var recordId = needitRecord.insert();

	// check if record could be created
	if (recordId === null){
		apiError.setStatus(543);
		apiError.setMessage("Could not create record");
		apiError.setDetail("Could not create a new record with the information passed in body.");
		response.setError(apiError);
		return;
	}

	// Create a body object. Add property value pairs to the body.
	var body = {};
	for (var prop in needitRecord) {
		if (needitRecord[prop]){
			body[prop] = needitRecord.getValue(prop);
		}
	}

	// Add additional information to body
	body.name = requestFor.name;
	body.email = requestFor.email;
	body.record_id = recordId;
	body.record_link = gs.getProperty('glide.servlet.uri') + needitRecord.getLink(false);

	// Send the response object, which is returned to the requestor, to the body object.
	response.setBody(body);
})(request, response);]]></operation_script>
        <operation_uri>/api/x_58872_needit/v2/needit_api/niorders</operation_uri>
        <produces>application/json,application/xml,text/xml</produces>
        <produces_customized>false</produces_customized>
        <relative_path>/niorders</relative_path>
        <request_example>{"category":"Software","impact":"2","urgency":"1","short_description":"This is a RESTful incident"}</request_example>
        <requires_acl_authorization>true</requires_acl_authorization>
        <requires_authentication>true</requires_authentication>
        <requires_snc_internal_role>true</requires_snc_internal_role>
        <short_description>Create a new NeedIt order.</short_description>
        <sys_class_name>sys_ws_operation</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-07-08 12:52:41</sys_created_on>
        <sys_id>1e8c2601db26330048861461399619ea</sys_id>
        <sys_mod_count>22</sys_mod_count>
        <sys_name>ni_orders</sys_name>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy/>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sys_ws_operation_1e8c2601db26330048861461399619ea</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-07-09 07:12:01</sys_updated_on>
        <web_service_definition display_value="NeedIt API">cea1de0cdb6233004886146139961936</web_service_definition>
        <web_service_version display_value="v2">1b642ac8dba233004886146139961922</web_service_version>
    </sys_ws_operation>
</record_update>
